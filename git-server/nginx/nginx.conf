worker_processes  1;
error_log output.log;

events {
  worker_connections 1024;
}

http {
    server {
        listen 80;

        add_header Access-Control-Allow-Origin * always;

        add_header Cache-Control "max-age=0, no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;

        location / {
          default_type application/json;
          return 200 '{"code":"0", "message": "Welcome to git server"}';
        }

        location ~ workspaces/([^/]+)/branches/([^/]+)/revert {

          default_type application/json;

          set $workspace $1;
          set $branch $2;

          lua_need_request_body on;
          content_by_lua_block {
            local file = assert(io.popen("sh bin/revert.sh " .. ngx.var.workspace .. " " .. ngx.var.branch .. " '" .. ngx.var.request_body .. "'"))
            local result = assert(file:read('*all'))
            file.close();
            ngx.say(result);
          }

          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  * always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
            add_header "Access-Control-Allow-Headers" * always;
            return 200;
          }
        }

        location ~ workspaces/([^/]+)/branches/([^/]+)/changes {

          default_type application/json;

          set $workspace $1;
          set $branch $2;
          if ($request_method = POST ) {
            lua_need_request_body on;
            content_by_lua_block {
              local file = assert(io.popen("sh bin/add_commit_push.sh " .. ngx.var.workspace .. " " .. ngx.var.branch .. " '" .. ngx.var.request_body .."'"))
              local result = assert(file:read('*all'))
              file.close();
              ngx.say(result);
            }
          }

          if ($request_method = GET ) {
            content_by_lua_block {
              local file = assert(io.popen("sh -c 'bin/change_list.sh " .. ngx.var.workspace .. " " .. ngx.var.branch .."'"))
              local result = assert(file:read('*all'))
              file.close();
              ngx.say(result);
            }
          }


          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  * always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
            add_header "Access-Control-Allow-Headers" * always;
            return 200;
          }
        }


        location ~ workspaces/([^/]+)/branches/([^/]+) {

          default_type application/json;

          set $workspace $1;
          set $branch $2;

          content_by_lua_block {
            local file = assert(io.popen("sh -c 'bin/create_branch.sh " .. ngx.var.branch .. " " .. ngx.var.workspace .."'"))
            local result = assert(file:read('*all'))
            file.close();
            ngx.say(result);
          }
        }



        location ~ workspaces/([^/]+)/branches {
          default_type application/json;

          set $workspace $1;

          content_by_lua_block {
            local file = assert(io.popen("sh -c 'bin/get_branches.sh " .. ngx.var.workspace .."'"))
            local result = assert(file:read('*all'))
            file.close();
            ngx.say(result);
          }
        }


    }
}
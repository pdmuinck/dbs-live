worker_processes  1;
error_log output.log;

events {
  worker_connections 1024;
}

http {
    server {
        listen 80;

        add_header Access-Control-Allow-Origin * always;

        add_header Cache-Control "max-age=0, no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;

        location / {
          if ($request_method = POST ) {
            lua_need_request_body on;
            content_by_lua_block {
              local file = assert(io.popen("sh bin/run_dbt_operation.sh " .. string.gsub(ngx.var.request_uri, "?.*", "") .. " " .. ngx.var.arg_dbtAction))
               local result = assert(file:read('*all'))
               file.close();
               ngx.say(result);
            }
          }
          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  * always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
            add_header "Access-Control-Allow-Headers" * always;
            return 200;
          }
        }
    }
}
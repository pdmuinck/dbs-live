worker_processes  1;
error_log output.log;

events {
  worker_connections 1024;
}

http {
    server {

        root /;

        listen 80;

        add_header Access-Control-Allow-Origin * always;

        add_header Cache-Control "max-age=0, no-cache, no-store, must-revalidate" always;
        add_header Pragma "no-cache" always;

        location / {

          if ($request_method = POST ) {
            lua_need_request_body on;
            content_by_lua_block {
              if ngx.var.arg_type == "directory" then
                os.execute("mkdir -p " .. string.gsub(ngx.var.request_uri, "?.*", ""))
              else
                local file = io.open(string.gsub(ngx.var.request_uri, "?.*", ""), "w+b")
                file:write(ngx.var.request_body)
                file:close()
               end;
               local response = assert(io.popen("sh -c 'bin/create_file_or_directory_response.sh " .. string.gsub(ngx.var.request_uri, "?.*", "") .. "'"))
               local result = assert(response:read('*all'))
               response.close();
               ngx.say(result);
            }
          }

          if ($request_method = DELETE ) {
            content_by_lua_block {
              os.execute("rm -r " .. ngx.var.request_uri)
              local response = assert(io.popen("sh -c 'bin/create_file_or_directory_response.sh " .. string.gsub(ngx.var.request_uri, "?.*", "") .. "'"))
              local result = assert(response:read('*all'))
              response.close();
              ngx.say(result);
            }
          }

          if ($request_method = OPTIONS ) {
                add_header "Access-Control-Allow-Origin"  * always;
                add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
                add_header "Access-Control-Allow-Headers" * always;
                return 200;
              }
        }

        location ~ workspaces/([^/]+)/branches/([^/]+/rename) {
          default_type application/json;

          set $workspace $1;
          set $branch $2;

          lua_need_request_body on;
          content_by_lua_block {
            local file = assert(io.popen("sh bin/rename_object.sh " .. ngx.var.workspace .. " "  .. ngx.var.branch .. " '" .. ngx.var.request_body .."'"))
            local result = assert(file:read('*all'))
            file.close();
            ngx.say(result);
          }

          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  * always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
            add_header "Access-Control-Allow-Headers" * always;
            return 200;
          }

        }

        location ~ workspaces/([^/]+)/branches/([^/]+) {

          default_type application/json;

          set $workspace $1;
          set $branch $2;

          content_by_lua_block {
            local file = assert(io.popen("sh -c 'bin/directory_tree.sh /mnt/" .. ngx.var.workspace .. "/branches/"  .. ngx.var.branch .."'"))
            local result = assert(file:read('*all'))
            file.close();
            ngx.say(result);
          }
        }


        location ~ workspaces/([^/]+) {

          default_type application/json;

          set $workspace $1;

          if ($request_method = POST ) {
            lua_need_request_body on;
            content_by_lua_block {
             local response = assert(io.popen("sh bin/create_workspace.sh " .. ngx.var.workspace .. " '" .. ngx.var.request_body .. "'"))
             local result = assert(response:read('*all'))
             response.close();
             ngx.say(result);
            }
          }


          if ($request_method = OPTIONS ) {
            add_header "Access-Control-Allow-Origin"  * always;
            add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, HEAD, DELETE" always;
            add_header "Access-Control-Allow-Headers" * always;
            return 200;
          }
        }
    }
}